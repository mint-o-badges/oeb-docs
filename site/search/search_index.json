{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OEB Docs Welcome to the documentation of Open Educational Badges ! Introduction The platform itself can be found here . All of it is open source -- including this documentation . In addition to this documentation, there is also the API documentation. There are two versions which you can use both: V1 and V2 . This documentation is split in two parts: The technical and the UI . The UI documents the user interface, so how to use the platform as a user. The technical documents the backend. More specifically, how one can use the backend as a third party application. For now this is mainly via plugins.","title":"Home"},{"location":"#oeb-docs","text":"Welcome to the documentation of Open Educational Badges !","title":"OEB Docs"},{"location":"#introduction","text":"The platform itself can be found here . All of it is open source -- including this documentation . In addition to this documentation, there is also the API documentation. There are two versions which you can use both: V1 and V2 . This documentation is split in two parts: The technical and the UI . The UI documents the user interface, so how to use the platform as a user. The technical documents the backend. More specifically, how one can use the backend as a third party application. For now this is mainly via plugins.","title":"Introduction"},{"location":"technical/","text":"Technical documentation This documentation documents the technical site of Open Educational Badges. For now this mainly means that it documents how to integrate third party applications.","title":"Introduction"},{"location":"technical/#technical-documentation","text":"This documentation documents the technical site of Open Educational Badges. For now this mainly means that it documents how to integrate third party applications.","title":"Technical documentation"},{"location":"technical/credentials/","text":"Obtaining credentials Client ID and Secret To obtain a client ID and secret, log in in the UI . You can then navigate to Konto -> App Integration (or go the link directly). via the Neue Credentials generieren button you can then generate your credentials. The credentials consist of a Client ID and a Client Secret . You should write down your client secret because you won't be able to view it at a later point in time. With those credentials you and other third party applications are able to obtain access to our API and thus do everything that our UI can do. This is important , especially because the scope of the returned access token in the next step might indicate something else. So again: With these credentials, everyone can act in the name of you and access, modify and delete all the information that is stored about you in our system. Access Token If you want to make requests to our API, you need to obtain an Access token . These are tokens with a limited time of life (24 hours by default). To request tokens, you need to make a POST request to our API. For security reasons in our application we store the access token in an HttpOnly cookie. That means that the browser cannot access the content, instead it's passed with the requests as a cookie. That also means that we don't return the access token in the data section of the response, but in the cookie section. If you use cURL for example this might look like this: curl --request POST \\ --url 'https://api.openbadges.education/o/token' \\ --header 'content-type: application/x-www-form-urlencoded' \\ --data 'grant_type=client_credentials' \\ --data 'client_id=YOUR_CLIENT_ID' \\ --data 'client_secret=YOUR_CLIENT_SECRET' --verbose The response will then look something like this: Note: Unnecessary use of -X or --request, POST is already inferred. * <a lot of verbose messages that aren't relevant> > POST /o/token HTTP/1.1 > Host: api.openbadges.education > User-Agent: curl/7.88.1 > Accept: */* > content-type: application/x-www-form-urlencoded > Content-Length: 102 > * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4): * We are completely uploaded and fine < HTTP/2 200 < access-control-allow-origin: * < cache-control: no-store < content-type: application/json < date: Mon, 18 Nov 2024 13:22:27 GMT < pragma: no-cache < server: nginx/1.25.2 < vary: Authorization, Cookie, Origin,Origin < x-frame-options: DENY < Content-Length: 67 < Set-Cookie: access_token=YOUR_ACCESS_TOKEN; expires=Tue, 19 Nov 2024 13:19:00 GMT; HttpOnly; Max-Age=86400; Path=/; Secure < * Connection #0 to host api.openbadges.education left intact {\"expires_in\": 86400, \"token_type\": \"Bearer\", \"scope\": \"r:profile\"} Once again, note that the scope doesn't actually mean anything (yet). You can read the access token from the Set-Cookie value. With username and password For the curious among you, there is a second way to obtain the access token. This is also the way that our application does it (and the way it's documented in the API docs): Via username and password. For that you don't need a client ID and Secret, but the username and password of your user: curl --request POST \\ --url 'https://api.openbadges.education/o/token' \\ --header 'content-type: application/x-www-form-urlencoded' \\ --data 'grant_type=password' \\ --data 'username=YOUR_USERNAME' \\ --data 'password=YOUR_PASSWORD' \\ --data 'client_id=public' --verbose","title":"Credentials"},{"location":"technical/credentials/#obtaining-credentials","text":"","title":"Obtaining credentials"},{"location":"technical/credentials/#client-id-and-secret","text":"To obtain a client ID and secret, log in in the UI . You can then navigate to Konto -> App Integration (or go the link directly). via the Neue Credentials generieren button you can then generate your credentials. The credentials consist of a Client ID and a Client Secret . You should write down your client secret because you won't be able to view it at a later point in time. With those credentials you and other third party applications are able to obtain access to our API and thus do everything that our UI can do. This is important , especially because the scope of the returned access token in the next step might indicate something else. So again: With these credentials, everyone can act in the name of you and access, modify and delete all the information that is stored about you in our system.","title":"Client ID and Secret"},{"location":"technical/credentials/#access-token","text":"If you want to make requests to our API, you need to obtain an Access token . These are tokens with a limited time of life (24 hours by default). To request tokens, you need to make a POST request to our API. For security reasons in our application we store the access token in an HttpOnly cookie. That means that the browser cannot access the content, instead it's passed with the requests as a cookie. That also means that we don't return the access token in the data section of the response, but in the cookie section. If you use cURL for example this might look like this: curl --request POST \\ --url 'https://api.openbadges.education/o/token' \\ --header 'content-type: application/x-www-form-urlencoded' \\ --data 'grant_type=client_credentials' \\ --data 'client_id=YOUR_CLIENT_ID' \\ --data 'client_secret=YOUR_CLIENT_SECRET' --verbose The response will then look something like this: Note: Unnecessary use of -X or --request, POST is already inferred. * <a lot of verbose messages that aren't relevant> > POST /o/token HTTP/1.1 > Host: api.openbadges.education > User-Agent: curl/7.88.1 > Accept: */* > content-type: application/x-www-form-urlencoded > Content-Length: 102 > * TLSv1.3 (IN), TLS handshake, Newsession Ticket (4): * We are completely uploaded and fine < HTTP/2 200 < access-control-allow-origin: * < cache-control: no-store < content-type: application/json < date: Mon, 18 Nov 2024 13:22:27 GMT < pragma: no-cache < server: nginx/1.25.2 < vary: Authorization, Cookie, Origin,Origin < x-frame-options: DENY < Content-Length: 67 < Set-Cookie: access_token=YOUR_ACCESS_TOKEN; expires=Tue, 19 Nov 2024 13:19:00 GMT; HttpOnly; Max-Age=86400; Path=/; Secure < * Connection #0 to host api.openbadges.education left intact {\"expires_in\": 86400, \"token_type\": \"Bearer\", \"scope\": \"r:profile\"} Once again, note that the scope doesn't actually mean anything (yet). You can read the access token from the Set-Cookie value.","title":"Access Token"},{"location":"technical/credentials/#with-username-and-password","text":"For the curious among you, there is a second way to obtain the access token. This is also the way that our application does it (and the way it's documented in the API docs): Via username and password. For that you don't need a client ID and Secret, but the username and password of your user: curl --request POST \\ --url 'https://api.openbadges.education/o/token' \\ --header 'content-type: application/x-www-form-urlencoded' \\ --data 'grant_type=password' \\ --data 'username=YOUR_USERNAME' \\ --data 'password=YOUR_PASSWORD' \\ --data 'client_id=public' --verbose","title":"With username and password"},{"location":"technical/requests/","text":"Making requests If you now obtained your credentials , you can start making HTTP requests to our API. You can make all the requests documented in the V1 and V2 API documentation. Authentication You always need to append your access token. As header One option to do this is by adding it as a header. In cURL for example this means adding --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' at the end. An example request would then look like this: curl --request GET \\ --url 'https://api.openbadges.education/v2/badgeclasses' \\ --header 'accept: application/json' \\ --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' This request returns a list of all the badge classes for the authenticated user. As cookie The other option to do it would be to append it as a cookie. This is the way our application does it, since it allows using the HttpOnly cookie. To achieve this in Angular, for example, simply add the option withCredentials: true , after having received the response with the Set-Cookie option. An example request would then look like this: GET /issuer HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate, br, zstd Accept-Language: en-GB,en-US;q=0.9,en;q=0.8 Cache-Control: no-cache Connection: keep-alive Cookie: csrftoken=YOUR_CSRF_TOKEN; access_token=YOUR_ACCESS_TOKEN DNT: 1 Host: openbadges.education Pragma: no-cache Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Sec-Fetch-User: ?1 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 sec-ch-ua: \"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\" sec-ch-ua-mobile: ?0 sec-ch-ua-platform: \"Linux\"","title":"Requests"},{"location":"technical/requests/#making-requests","text":"If you now obtained your credentials , you can start making HTTP requests to our API. You can make all the requests documented in the V1 and V2 API documentation.","title":"Making requests"},{"location":"technical/requests/#authentication","text":"You always need to append your access token.","title":"Authentication"},{"location":"technical/requests/#as-header","text":"One option to do this is by adding it as a header. In cURL for example this means adding --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' at the end. An example request would then look like this: curl --request GET \\ --url 'https://api.openbadges.education/v2/badgeclasses' \\ --header 'accept: application/json' \\ --header 'Authorization: Bearer YOUR_ACCESS_TOKEN' This request returns a list of all the badge classes for the authenticated user.","title":"As header"},{"location":"technical/requests/#as-cookie","text":"The other option to do it would be to append it as a cookie. This is the way our application does it, since it allows using the HttpOnly cookie. To achieve this in Angular, for example, simply add the option withCredentials: true , after having received the response with the Set-Cookie option. An example request would then look like this: GET /issuer HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Accept-Encoding: gzip, deflate, br, zstd Accept-Language: en-GB,en-US;q=0.9,en;q=0.8 Cache-Control: no-cache Connection: keep-alive Cookie: csrftoken=YOUR_CSRF_TOKEN; access_token=YOUR_ACCESS_TOKEN DNT: 1 Host: openbadges.education Pragma: no-cache Sec-Fetch-Dest: document Sec-Fetch-Mode: navigate Sec-Fetch-Site: same-origin Sec-Fetch-User: ?1 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 sec-ch-ua: \"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\" sec-ch-ua-mobile: ?0 sec-ch-ua-platform: \"Linux\"","title":"As cookie"},{"location":"ui/","text":"UI documentation","title":"Introduction"},{"location":"ui/#ui-documentation","text":"","title":"UI documentation"}]}